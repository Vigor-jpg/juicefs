name: 'JuiceFS Rmr Action'
description: 'JuiceFS Rmr action'
inputs:
  meta_url:  
    description: 'meta url'
    required: true
    default: ''
  mount_point:
    description: 'mount point'
    required: true
    default: /tmp/myjfs
  volume_name:
    description: 'volume name'
    required: true
    default: myjfs
  
runs:
  using: "composite"
  steps:
    - name: Build linux target
      run: |
        #if it is self ruuner
        hostname | grep bench && export GOPATH=/usr/local/go && export HOME=/root
        make juicefs 
        # wget -q https://github.com/juicedata/juicefs/releases/download/v1.0.0-beta3/juicefs-1.0.0-beta3-linux-amd64.tar.gz
        # tar -xzf juicefs-1.0.0-beta3-linux-amd64.tar.gz
      shell: bash

    - name: Init
      run: | 
        mp=${{inputs.mount_point}}
        meta_url=${{inputs.meta_url}}
        volume=${{inputs.volume_name}}
        test -d $mp && ./juicefs umount -f $mp
        ./juicefs status $meta_url && UUID=$(./juicefs status $meta_url | grep UUID | cut -d '"' -f 4) || echo "meta not exist"
        if [ -n "$UUID" ];then
          ./juicefs destroy --force $meta_url $UUID
        fi
        test -d /var/jfs/$volume && rm -rf /var/jfs/$volume || true
      shell: bash

    - name: create database
      shell: bash
      run: | 
        meta_url=${{inputs.meta_url}}
        isolation_level="${{inputs.isolation_level}}"
        db_name=$(basename $meta_url | awk -F? '{print $1}')
        if [[ "$meta_url" == mysql* ]]; then
          user=$(echo $meta_url |  awk -F/ '{print $3}' | awk -F@ '{print $1}' | awk -F: '{print $1}')
          password=$(echo $meta_url |  awk -F/ '{print $3}' | awk -F@ '{print $1}' | awk -F: '{print $2}')
          test -n "$password" && password="-p$password" || password=""
          host=$(basename $(dirname $meta_url) | awk -F@ '{print $2}'| sed 's/(//g' | sed 's/)//g' | awk -F: '{print $1}')
          port=$(basename $(dirname $meta_url) | awk -F@ '{print $2}'| sed 's/(//g' | sed 's/)//g' | awk -F: '{print $2}')
          test -z "$port" && port="3306"
          mysql -u$user $password -h $host -P $port -e "set global transaction isolation level $isolation_level;" 
          mysql -u$user $password -h $host -P $port -e "show variables like '%isolation%;'" 
          mysql -u$user $password -h $host -P $port -e "drop database if exists $db_name; create database $db_name;" 
        elif [[ "$meta_url" == postgres* ]]; then
          export PGPASSWORD="postgres"
          printf "\set AUTOCOMMIT on\ndrop database if exists $db_name; create database $db_name; " |  psql -U postgres -h localhost
          printf "\set AUTOCOMMIT on\nALTER DATABASE $db_name SET DEFAULT_TRANSACTION_ISOLATION TO '$isolation_level';" |  psql -U postgres -h localhost
        fi      

    - name: Rmr
      shell: bash
      run: |
        meta_url=${{inputs.meta_url}}
        mp=${{inputs.mount_point}}
        ./juicefs format $meta_url rmr-test
        # wget -q https://s.juicefs.com/static/bench/2M_emtpy_files.dump.gz
        # gzip -dk  2M_emtpy_files.dump.gz
        git clone https://github.com/sanwan/actionfile.git
        cat actionfile/META_50W_EMPTY_FILE.json* > META_50W_EMPTY_FILE.json
        ./juicefs load $meta_url META_50W_EMPTY_FILE.json
        # ./juicefs mdtest $meta_url test --dirs 10 --depth 3 --files 30 --threads 10 --no-usage-report
        ./juicefs mount -d $meta_url $mp
        sleep 3
        declare -a pidlist
        ./juicefs rmr $mp/test/ &
        pidlist+=($!)
        ./juicefs rmr $mp/test/ &
        pidlist+=($!)
        ./juicefs rmr $mp/test/ &
        pidlist+=($!)
        wait "${pidlist[@]}"
        [ -d "$mp/test/" ] && exit 1
        ./juicefs umount  $mp --force

    - name: Log
      if: ${{ failure() }}
      run: |
        tail -n 100 /var/log/juicefs.log
      shell: bash